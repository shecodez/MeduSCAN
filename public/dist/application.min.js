!function(window){"use strict";function registerModule(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)}var applicationModuleName="meduscan",service={applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","angularFileUpload","ngMaterial","io-barcode","mdPickers","AngularPrint"],registerModule:registerModule};window.ApplicationConfiguration=service}(window),function(app){"use strict";function bootstrapConfig($locationProvider,$httpProvider,$mdThemingProvider,$mdIconProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor"),$mdThemingProvider.theme("default").primaryPalette("cyan").accentPalette("yellow"),$mdIconProvider.defaultIconSet("public/assets/svg/avatars.svg",128)}function init(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[app.applicationModuleName])}angular.module(app.applicationModuleName,app.applicationModuleVendorDependencies),angular.module(app.applicationModuleName).config(bootstrapConfig),bootstrapConfig.$inject=["$locationProvider","$httpProvider","$mdThemingProvider","$mdIconProvider"],angular.element(document).ready(init)}(ApplicationConfiguration),function(app){"use strict";app.registerModule("blogs")}(ApplicationConfiguration),function(app){"use strict";app.registerModule("chat",["core"]),app.registerModule("chat.routes",["ui.router","core.routes"])}(ApplicationConfiguration),function(app){"use strict";app.registerModule("core"),app.registerModule("core.routes",["ui.router"]),app.registerModule("core.admin",["core"]),app.registerModule("core.admin.routes",["ui.router"])}(ApplicationConfiguration),function(app){"use strict";app.registerModule("courses")}(ApplicationConfiguration),function(app){"use strict";app.registerModule("institutions")}(ApplicationConfiguration),function(app){"use strict";app.registerModule("keys")}(ApplicationConfiguration),function(app){"use strict";app.registerModule("medications")}(ApplicationConfiguration),function(app){"use strict";app.registerModule("patients")}(ApplicationConfiguration),function(app){"use strict";app.registerModule("requests")}(ApplicationConfiguration),function(app){"use strict";app.registerModule("tutorials")}(ApplicationConfiguration),function(app){"use strict";app.registerModule("users"),app.registerModule("users.admin"),app.registerModule("users.admin.routes",["ui.router","core.routes","users.admin.services"]),app.registerModule("users.admin.services"),app.registerModule("users.routes",["ui.router","core.routes"]),app.registerModule("users.services")}(ApplicationConfiguration),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("blogs",{"abstract":!0,url:"/blogs",template:"<ui-view/>"}).state("blogs.list",{url:"",templateUrl:"modules/blogs/client/views/list-blogs.client.view.html",controller:"BlogsListController",controllerAs:"vm",data:{pageTitle:"Blogs List"}}).state("blogs.create",{url:"/create",templateUrl:"modules/blogs/client/views/form-blog.client.view.html",controller:"BlogsController",controllerAs:"vm",resolve:{blogResolve:newBlog},data:{roles:["admin"],pageTitle:"Blogs Create"}}).state("blogs.edit",{url:"/:blogId/edit",templateUrl:"modules/blogs/client/views/form-blog.client.view.html",controller:"BlogsController",controllerAs:"vm",resolve:{blogResolve:getBlog},data:{roles:["admin"],pageTitle:"Edit Blog {{ blogResolve.name }}"}}).state("blogs.view",{url:"/:blogId",templateUrl:"modules/blogs/client/views/view-blog.client.view.html",controller:"BlogsController",controllerAs:"vm",resolve:{blogResolve:getBlog},data:{pageTitle:"Blog {{ articleResolve.name }}"}})}function getBlog($stateParams,BlogsService){return BlogsService.get({blogId:$stateParams.blogId}).$promise}function newBlog(BlogsService){return new BlogsService}angular.module("blogs").config(routeConfig),routeConfig.$inject=["$stateProvider"],getBlog.$inject=["$stateParams","BlogsService"],newBlog.$inject=["BlogsService"]}(),function(){"use strict";function BlogsController($scope,$state,Authentication,blog){function remove(){confirm("Are you sure you want to delete?")&&vm.blog.$remove($state.go("blogs.list"))}function save(isValid){function successCallback(res){$state.go("blogs.view",{blogId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.blog._id?vm.blog.$update(successCallback,errorCallback):vm.blog.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.blogForm"),!1)}var vm=this;vm.authentication=Authentication,vm.blog=blog,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("blogs").controller("BlogsController",BlogsController),BlogsController.$inject=["$scope","$state","Authentication","blogResolve"]}(),function(){"use strict";function BlogsListController(BlogsService){var vm=this;vm.blogs=BlogsService.query()}angular.module("blogs").controller("BlogsListController",BlogsListController),BlogsListController.$inject=["BlogsService"]}(),function(){"use strict";function BlogsService($resource){return $resource("api/blogs/:blogId",{blogId:"@_id"},{update:{method:"PUT"}})}angular.module("blogs").factory("BlogsService",BlogsService),BlogsService.$inject=["$resource"]}(),function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Chat",state:"chat"})}angular.module("chat").run(menuConfig),menuConfig.$inject=["menuService"]}(),function(){"use strict";function routeConfig($stateProvider){}angular.module("chat.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){"use strict";function ChatController($scope,$state,Authentication,Socket){function init(){Authentication.user||$state.go("home"),Socket.socket||Socket.connect(),Socket.on("chatMessage",function(message){vm.messages.unshift(message)}),$scope.$on("$destroy",function(){Socket.removeListener("chatMessage")})}function sendMessage(){var message={text:vm.messageText};Socket.emit("chatMessage",message),vm.messageText=""}var vm=this;vm.messages=[],vm.messageText="",vm.sendMessage=sendMessage,init()}angular.module("chat").controller("ChatController",ChatController),ChatController.$inject=["$scope","$state","Authentication","Socket"]}(),function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}angular.module("core.admin").run(menuConfig),menuConfig.$inject=["menuService"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}angular.module("core.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){"use strict";function menuConfig(menuService){menuService.addMenu("account",{roles:["user"]}),menuService.addMenuItem("account",{title:"",state:"settings",type:"dropdown",roles:["user"]}),menuService.addSubMenuItem("account","settings",{title:"Edit Profile",state:"settings.profile"}),menuService.addSubMenuItem("account","settings",{title:"Edit Profile Picture",state:"settings.picture"}),menuService.addSubMenuItem("account","settings",{title:"Change Password",state:"settings.password"})}angular.module("core").run(menuConfig),menuConfig.$inject=["menuService"]}(),function(){"use strict";function routeFilter($rootScope,$state,Authentication){function stateChangeStart(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){for(var allowed=!1,i=0,roles=toState.data.roles;i<roles.length;i++)if("guest"===roles[i]||Authentication.user&&void 0!==Authentication.user.roles&&Authentication.user.roles.indexOf(roles[i])!==-1){allowed=!0;break}allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.transitionTo("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}function stateChangeSuccess(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)}function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",stateChangeStart),$rootScope.$on("$stateChangeSuccess",stateChangeSuccess)}angular.module("core").run(routeFilter),routeFilter.$inject=["$rootScope","$state","Authentication"]}(),function(){"use strict";function routeConfig($stateProvider,$urlRouterProvider){$urlRouterProvider.rule(function($injector,$location){var path=$location.path(),hasTrailingSlash=path.length>1&&"/"===path[path.length-1];if(hasTrailingSlash){var newPath=path.substr(0,path.length-1);$location.replace().path(newPath)}}),$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html",controller:"HomeController",controllerAs:"vm"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/error/404.client.view.html",data:{ignoreState:!0,pageTitle:"Not-Found"}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/error/400.client.view.html",data:{ignoreState:!0,pageTitle:"Bad-Request"}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/error/403.client.view.html",data:{ignoreState:!0,pageTitle:"Forbidden"}}),$stateProvider.state("dashboard",{url:"/dashboard",templateUrl:"modules/core/client/views/dashboard.client.view.html",controller:"DashboardController",controllerAs:"vm"}),$stateProvider.state("about",{url:"/about",templateUrl:"modules/core/client/views/about.client.view.html"}),$stateProvider.state("getting_started",{url:"/getting-started",templateUrl:"modules/core/client/views/getting_started.client.view.html"}),$stateProvider.state("contact",{url:"/contact",templateUrl:"modules/core/client/views/contact.client.view.html"}),$stateProvider.state("students",{url:"/students",templateUrl:"modules/core/client/views/students.client.view.html"}),$stateProvider.state("teachers",{url:"/teachers",templateUrl:"modules/core/client/views/teachers.client.view.html"})}angular.module("core.routes").config(routeConfig),routeConfig.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function AboutController(){var vm=this;vm.testimonials=[{blockQuote:"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Et cupiditate deleniti ratione in. Expedita nemo, quisquam, fuga adipisci omnis ad mollitia libero culpa nostrum est quia eos esse vel!",name:"FirstName LastName",company:"GCSU Health Sciences"},{blockQuote:"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Et cupiditate deleniti ratione in. Expedita nemo, quisquam, fuga adipisci omnis ad mollitia libero culpa nostrum est quia eos esse vel!",name:"FirstName LastName",company:"company2"}]}angular.module("core").controller("AboutController",AboutController)}(),function(){"use strict";function ContactController($scope,$http,toastService){this.sendMail=function(form){var data={contactName:this.contactName,contactEmail:this.contactEmail,contactMsg:this.contactMsg};$http({method:"POST",url:"/contact",data:data}).then(function(response){toastService.simpleToast("Message sent. Thanks "+response.data.contactName+"!")},function(response){}),this.contactName="",this.contactEmail="",this.contactMsg="",$scope.resetForm(form)},$scope.resetForm=function(form){form.$setPristine(),form.$setUntouched()}}angular.module("core").controller("ContactController",ContactController),ContactController.$inject=["$scope","$http","toastService"]}(),function(){"use strict";function DashboardController(Authentication){function init(){vm.authentication.user._id&&(vm.role=vm.authentication.user.roles[0])}function buildGridModelS(tileTmpl){for(var it=[],results=[],icons=["search","dashboard","home","input"],titles=["Patient Lookup","Dashboard","Home","Request Join"],links=["patient-lookup","dashboard","home","request-join"],i=0;i<4;i++){switch(it=angular.extend({},tileTmpl),it.icon=it.icon+icons[i],it.title=it.title+titles[i],it.href=it.href+links[i],it.span={row:1,col:1},i+1){case 1:it.background="gold-bg",it.span.col=2;break;case 2:it.background="pink-bg";break;case 3:it.background="blue-bg";break;case 4:it.background="mint-bg",it.span.col=2}results.push(it)}return results}function buildGridModelT(tileTmpl){for(var it=[],results=[],icons=["assignment_ind","search","date_range","add_box"],titles=["Patients","Patient Lookup","Courses","Medications"],links=["patients.list","patient-lookup","courses.list","medications.list"],i=0;i<4;i++){switch(it=angular.extend({},tileTmpl),it.icon=it.icon+icons[i],it.title=it.title+titles[i],it.href=it.href+links[i],it.span={row:1,col:1},i+1){case 1:it.background="pink-bg",it.span.col=2;break;case 2:it.background="mint-bg";break;case 3:it.background="blue-bg";break;case 4:it.background="gold-bg",it.span.col=2}results.push(it)}return results}var vm=this;vm.authentication=Authentication,vm.authentication.user._id&&(vm.role=vm.authentication.user.roles[0]),this.studentsTiles=buildGridModelS({icon:"",title:"",href:"",background:""}),this.teachersTiles=buildGridModelT({icon:"",title:"",href:"",background:""}),init()}angular.module("core").controller("DashboardController",DashboardController),DashboardController.$inject=["Authentication"]}(),function(){"use strict";function GettingStartedController(){function buildGridModel(tileTmpl){for(var it=[],results=[],icons=["fa-university","fa-graduation-cap","fa-users","fa-thumbs-o-up"],titles=["Teachers","Students","Partners","Investors"],links=["teachers","students","contact","contact"],i=0;i<4;i++){switch(it=angular.extend({},tileTmpl),it.icon=it.icon+icons[i],it.title=it.title+titles[i],it.href=it.href+links[i],it.span={row:1,col:1},i+1){case 1:it.background="lime-bg";break;case 2:it.background="blue-bg";break;case 3:it.background="gold-bg";break;case 4:it.background="pink-bg"}results.push(it)}return results}this.tiles=buildGridModel({icon:"",title:"",href:"",background:""})}angular.module("core").controller("GettingStartedController",GettingStartedController)}(),function(){"use strict";function HeaderController($scope,$state,Authentication,menuService,$mdSidenav,$mdDialog){function stateChangeSuccess(){vm.isCollapsed=!1}var vm=this;vm.accountMenu=menuService.getMenu("account").items[0],vm.authentication=Authentication,vm.isCollapsed=!1,vm.menu=menuService.getMenu("topbar"),vm.coreLinks=[{icon:"home",label:"Home",goTo:"home"},{icon:"group",label:"About Us",goTo:"about"},{icon:"important_devices",label:"Getting Started",goTo:"getting_started"},{icon:"account_balance",label:"Teachers",goTo:"teachers"},{icon:"school",label:"Students",goTo:"students"},{icon:"view_day",label:"Blogs",goTo:"blogs.list"},{icon:"desktop_mac",label:"Tutorials",goTo:"tutorials.list"},{icon:"send",label:"Contact Us",goTo:"contact"}],vm.openLegalDialog=function(){$mdDialog.show({templateUrl:"modules/core/client/views/dialogs/legal.client.dialog.html",controller:["$scope","$mdDialog",function($scope,$mdDialog){$scope.cancel=function(){$mdDialog.cancel()}}],parent:angular.element(document.body)})};var originatorEv;this.openProfileMenu=function($mdOpenMenu,ev){originatorEv=ev,$mdOpenMenu(ev)},vm.toggleMenu=function(){$mdSidenav("menu").toggle()},vm.close=function(){$mdSidenav("menu").close()},$scope.$on("$stateChangeSuccess",stateChangeSuccess)}angular.module("core").controller("HeaderController",HeaderController),HeaderController.$inject=["$scope","$state","Authentication","menuService","$mdSidenav","$mdDialog"]}(),function(){"use strict";function HomeController($window){function buildGridModel(tileTmpl){for(var it=[],results=[],icons=["fa-group","fa-heartbeat","fa-university","fa-graduation-cap","fa-newspaper-o","fa-tv","fa-send-o"],titles=["About Us","Getting Started","Teachers","Students","Blog","Tutorials","Contact Us"],links=["about","getting_started","teachers","students","blogs.list","tutorials.list","contact"],i=0;i<7;i++){switch(it=angular.extend({},tileTmpl),it.icon=it.icon+icons[i],it.title=it.title+titles[i],it.href=it.href+links[i],it.span={row:1,col:1},i+1){case 1:it.background="gold-bg",it.span.col=2;break;case 2:it.background="primary-bg",it.span.row=it.span.col=2;break;case 3:it.background="lime-bg";break;case 4:it.background="blue-bg";break;case 5:it.background="aqua-bg";break;case 6:it.background="mint-bg";break;case 7:it.background="pink-bg",it.span.col=2}results.push(it)}return results}var vm=this;this.tiles=buildGridModel({icon:"",title:"",href:"",background:""}),vm.news={},vm.news.text="Welcome to the MeduSCAN Beta Test!",vm.news.author="@MeduSCAN",vm.news.date=$window.moment("20160628","YYYYMMDD").fromNow()}angular.module("core").controller("HomeController",HomeController),HomeController.$inject=["$window"]}(),function(){"use strict";function NavigationController(Authentication,$mdSidenav){function init(){vm.authentication.user._id&&(vm.role=vm.authentication.user.roles[0])}var vm=this;vm.authentication=Authentication,vm.role={},init(),vm.role&&("admin"===vm.role&&(vm.sideBarLinks=[{icon:"home",label:"Home",href:"home"},{icon:"dashboard",label:"Dashboard",href:"dashboard"},{icon:"people",label:"Users",href:"admin.users"},{icon:"account_balance",label:"Institutions",href:"institutions.list"},{icon:"input",label:"Requests",href:"requests.list"},{icon:"vpn_key",label:"Keys",href:"keys.list"}]),"student"===vm.role&&(vm.sideBarLinks=[{icon:"home",label:"Home",href:"home"},{icon:"dashboard",label:"Dashboard",href:"dashboard"},{icon:"input",label:"Join Course",href:"request-join"},{icon:"search",label:"Patient Lookup",href:"patient-lookup"}]),"teacher"===vm.role&&(vm.sideBarLinks=[{icon:"home",label:"Home",href:"home"},{icon:"dashboard",label:"Dashboard",href:"dashboard"},{icon:"assignment_ind",label:"Patients",href:"patients.list"},{icon:"add_box",label:"Medications",href:"medications.list"},{icon:"date_range",label:"Courses",href:"courses.list"},{icon:"input",label:"Join Institute",href:"request-join"},{icon:"search",label:"Patient Lookup",href:"patient-lookup"}]))}angular.module("core").controller("NavigationController",NavigationController),NavigationController.$inject=["Authentication","$mdSidenav"]}(),function(){"use strict";function StudentsController(Authentication){function init(){vm.authentication.user._id&&(vm.role=vm.authentication.user.roles[0])}var vm=this;vm.authentication=Authentication,init()}angular.module("core").controller("StudentsController",StudentsController),StudentsController.$inject=["Authentication"]}(),function(){"use strict";function TeachersController(Authentication){function init(){vm.authentication.user._id&&(vm.role=vm.authentication.user.roles[0])}var vm=this;vm.authentication=Authentication,init()}angular.module("core").controller("TeachersController",TeachersController),TeachersController.$inject=["Authentication"]}(),angular.module("core").directive("owlCarousel",function(){return{restrict:"E",transclude:!1,link:function(scope){scope.initCarousel=function(element){var defaultOptions={},customOptions=scope.$eval(element.attr("data-options"));for(var key in customOptions)customOptions.hasOwnProperty(key)&&(defaultOptions[key]=customOptions[key]);element.owlCarousel(defaultOptions)}}}}).directive("owlCarouselItem",[function(){return{restrict:"A",transclude:!1,link:function(scope,element){scope.$last&&scope.initCarousel(element.parent())}}}]),function(){"use strict";function pageTitle($rootScope,$timeout,$interpolate,$state){function link(scope,element){function listener(event,toState){var title=getTitle($state.$current);$timeout(function(){element.text(title)},0,!1)}function getTitle(currentState){var applicationCoreTitle="MeduSCAN",workingState=currentState;if(currentState.data){workingState="undefined"!=typeof workingState.locals?workingState.locals.globals:workingState;var stateTitle=$interpolate(currentState.data.pageTitle)(workingState);return applicationCoreTitle+" - "+stateTitle}return applicationCoreTitle}$rootScope.$on("$stateChangeSuccess",listener)}var directive={restrict:"A",link:link};return directive}angular.module("core").directive("pageTitle",pageTitle),pageTitle.$inject=["$rootScope","$timeout","$interpolate","$state"]}(),function(){"use strict";function showErrors($timeout,$interpolate){function compile(elem,attrs){function linkFn(scope,el,attrs,formCtrl){function checkValidity(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)}function reset(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)}function toggleClasses(invalid){if(el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess)return el.toggleClass("has-success",showValidationMessages&&!invalid)}var inputEl,inputName,inputNgEl,options,showSuccess,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw new Error("show-errors element has no child input elements with a 'name' attribute class");scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},toggleClasses),scope.$on("show-errors-check-validity",checkValidity),scope.$on("show-errors-reset",reset)}if(attrs.showErrors.indexOf("skipFormGroupCheck")===-1&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw new Error("show-errors element does not have the 'form-group' or 'input-group' class");return linkFn}var directive={restrict:"A",require:"^form",compile:compile};return directive}angular.module("core").directive("showErrors",showErrors),showErrors.$inject=["$timeout","$interpolate"]}(),function(){"use strict";function authInterceptor($q,$injector,Authentication){function responseError(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:Authentication.user=null,$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}var service={responseError:responseError};return service}angular.module("core").factory("authInterceptor",authInterceptor),authInterceptor.$inject=["$q","$injector","Authentication"]}(),function(){"use strict";function mailingService(){return{someMethod:function(){return!0}}}angular.module("core").factory("mailingService",mailingService),mailingService.$inject=[]}(),function(){"use strict";function menuService(){function addMenu(menuId,options){return options=options||{},service.menus[menuId]={roles:options.roles||service.defaultRoles,items:options.items||[],shouldRender:shouldRender},service.menus[menuId]}function addMenuItem(menuId,options){if(options=options||{},service.validateMenuExistence(menuId),service.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?service.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)options.items.hasOwnProperty(i)&&service.addSubMenuItem(menuId,options.state,options.items[i]);return service.menus[menuId]}function addSubMenuItem(menuId,parentItemState,options){options=options||{},service.validateMenuExistence(menuId);for(var itemIndex in service.menus[menuId].items)service.menus[menuId].items[itemIndex].state===parentItemState&&service.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?service.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return service.menus[menuId]}function getMenu(menuId){return service.validateMenuExistence(menuId),service.menus[menuId]}function init(){shouldRender=function(user){if(this.roles.indexOf("*")!==-1)return!0;if(!user)return!1;for(var userRoleIndex in user.roles)if(user.roles.hasOwnProperty(userRoleIndex))for(var roleIndex in this.roles)if(this.roles.hasOwnProperty(roleIndex)&&this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1},addMenu("topbar",{roles:["*"]})}function removeMenu(menuId){service.validateMenuExistence(menuId),delete service.menus[menuId]}function removeMenuItem(menuId,menuItemState){service.validateMenuExistence(menuId);for(var itemIndex in service.menus[menuId].items)service.menus[menuId].items.hasOwnProperty(itemIndex)&&service.menus[menuId].items[itemIndex].state===menuItemState&&service.menus[menuId].items.splice(itemIndex,1);return service.menus[menuId]}function removeSubMenuItem(menuId,submenuItemState){service.validateMenuExistence(menuId);for(var itemIndex in service.menus[menuId].items)if(this.menus[menuId].items.hasOwnProperty(itemIndex))for(var subitemIndex in service.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items.hasOwnProperty(subitemIndex)&&service.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&service.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return service.menus[menuId]}function validateMenuExistence(menuId){if(menuId&&menuId.length){if(service.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")}var shouldRender,service={addMenu:addMenu,addMenuItem:addMenuItem,addSubMenuItem:addSubMenuItem,defaultRoles:["user","admin"],getMenu:getMenu,menus:{},removeMenu:removeMenu,removeMenuItem:removeMenuItem,removeSubMenuItem:removeSubMenuItem,validateMenuExistence:validateMenuExistence};return init(),service}angular.module("core").factory("menuService",menuService)}(),function(){"use strict";function Socket(Authentication,$state,$timeout){function connect(){Authentication.user&&(service.socket=io())}function emit(eventName,data){service.socket&&service.socket.emit(eventName,data)}function on(eventName,callback){service.socket&&service.socket.on(eventName,function(data){$timeout(function(){callback(data)})})}function removeListener(eventName){service.socket&&service.socket.removeListener(eventName)}var service={connect:connect,emit:emit,on:on,removeListener:removeListener,socket:null};return connect(),service}angular.module("core").factory("Socket",Socket),Socket.$inject=["Authentication","$state","$timeout"]}(),function(){"use strict";function toastService($mdToast){function sanitizePosition(){var current=toastPosition;current.bottom&&last.top&&(current.top=!1),current.top&&last.bottom&&(current.bottom=!1),current.right&&last.left&&(current.left=!1),current.left&&last.right&&(current.right=!1),last=angular.extend({},current)}var last={bottom:!1,top:!0,left:!1,right:!0},toastPosition=angular.extend({},last),getToastPosition=function(){return sanitizePosition(),Object.keys(toastPosition).filter(function(pos){return toastPosition[pos]}).join(" ")},simpleToast=function(message){var pinTo=getToastPosition(),toast=$mdToast.simple().textContent(message).action("X").position(pinTo);$mdToast.show(toast).then(function(response){"ok"===response&&$mdToast.hide()})};return{simpleToast:simpleToast}}angular.module("core").factory("toastService",toastService),toastService.$inject=["$mdToast"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("courses",{"abstract":!0,url:"/courses",template:"<ui-view/>"}).state("courses.list",{url:"",templateUrl:"modules/courses/client/views/list-courses.client.view.html",controller:"CoursesListController",controllerAs:"vm",data:{roles:["student","teacher","admin"],pageTitle:"Courses List"}}).state("courses.create",{url:"/create",templateUrl:"modules/courses/client/views/form-course.client.view.html",controller:"CoursesController",controllerAs:"vm",resolve:{courseResolve:newCourse},data:{roles:["teacher","admin"],pageTitle:"Courses Create"}}).state("courses.edit",{url:"/:courseId/edit",templateUrl:"modules/courses/client/views/form-course.client.view.html",controller:"CoursesController",controllerAs:"vm",resolve:{courseResolve:getCourse},data:{roles:["teacher","admin"],pageTitle:"Edit Course {{ courseResolve.name }}"}}).state("courses.view",{url:"/:courseId",templateUrl:"modules/courses/client/views/view-course.client.view.html",controller:"CoursesController",controllerAs:"vm",resolve:{courseResolve:getCourse},data:{pageTitle:"Course {{ articleResolve.name }}"}})}function getCourse($stateParams,CoursesService){return CoursesService.get({courseId:$stateParams.courseId}).$promise}function newCourse(CoursesService){return new CoursesService}angular.module("courses").config(routeConfig),routeConfig.$inject=["$stateProvider"],getCourse.$inject=["$stateParams","CoursesService"],newCourse.$inject=["CoursesService"]}(),function(){"use strict";function CoursesController($scope,$state,Authentication,course,DataFactory,confirmDialog,generateRequest,toastService,$mdDialog){function init(){vm.course._id&&(vm.course.isCurrentUserOwner=vm.isCurrentUserOwner,vm.course.students.length&&DataFactory.getData("courses",vm.course._id).then(function(res){vm.courseStudents=res.students;for(var i=0;i<vm.courseStudents.length;i++)vm.courseStudents[i].statusUnchanged=!0},function(err){vm.error=err}),vm.course.patients.length&&DataFactory.getData("courses",vm.course._id).then(function(res){vm.coursePatients=res.patients;for(var i=0;i<vm.coursePatients.length;i++)vm.coursePatients[i].statusUnchanged=!0},function(err){vm.error=err}))}function remove(){confirm("Are you sure you want to delete?")&&vm.course.$remove($state.go("courses.list"))}function save(isValid){function successCallback(res){$state.go("courses.view",{courseId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.course._id?vm.course.$update(successCallback,errorCallback):vm.course.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.courseForm"),!1)}var vm=this;vm.authentication=Authentication,vm.course=course,vm.courseStudents=[],vm.coursePatients=[],vm.subscribers=[],vm.patients=[],vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.statusOpts=[{label:"Active",value:!0},{label:"Inactive",value:!1}],vm.studentStatusOpts=[{id:1,value:"Pending"},{id:2,value:"Approved"},{id:3,value:"Denied"}],vm.date=new Date,vm.minStartDate=vm.date,vm.maxStartDate="",vm.minEndDate=vm.date.setDate((new Date).getDate()+1),vm.maxEndDate="",vm.user={},vm.user.canEdit=function(){var hasPermission=!1;if(vm.authentication.user)for(var i=0;i<vm.authentication.user.roles.length;i++)if("admin"===vm.authentication.user.roles[i]||"teacher"===vm.authentication.user.roles[i])return!0;return hasPermission},vm.exist=function(value){return!(null===value||""===value||void 0===value)},vm.exist(vm.course.startDate)?vm.course.startDate=new Date(vm.course.startDate):vm.course.startDate=new Date,vm.exist(vm.course.endDate)?vm.course.endDate=new Date(vm.course.endDate):vm.course.endDate=new Date,vm.course._id&&(vm.isCurrentUserOwner=course.isCurrentUserOwner),vm.exist(vm.course.request)&&(vm.subscribers=vm.course.request.subscribers),vm.getPatients=function(){var data="patients";DataFactory.getListPromise(data).then(function(patients){
vm.patients=patients.data},function(error){vm.error="Failed to retrieve Patient Data. Make sure you create some first"})},vm.getPatients(),vm.openSubscribersDialog=function(){var subscribers=vm.getAddableSubscribers(vm.subscribers);$mdDialog.show({clickOutsideToClose:!1,templateUrl:"modules/requests/client/views/dialogs/subs-table.client.template.html",controller:["$scope","$mdDialog","subscribers",function($scope,$mdDialog,subscribers){$scope.subscribers=subscribers,$scope.ok=function(){vm.addStudents(subscribers),$mdDialog.hide()},$scope.cancel=function(){$mdDialog.cancel()}}],locals:{subscribers:subscribers},parent:angular.element(document.body)})},vm.openPatientsDialog=function(){var patients=vm.getAddablePatients(vm.patients);$mdDialog.show({clickOutsideToClose:!1,templateUrl:"modules/patients/client/views/dialogs/patients-table.client.dialog.html",controller:["$scope","$mdDialog","patients",function($scope,$mdDialog,patients){$scope.patients=patients,$scope.ok=function(){vm.addPatients(patients),$mdDialog.hide()},$scope.cancel=function(){$mdDialog.cancel()}}],locals:{patients:patients},parent:angular.element(document.body)})},vm.getAddableSubscribers=function(subscribers){var tempSubs=[];return angular.forEach(subscribers,function(subscriber){vm.contains(vm.courseStudents,subscriber._id)?subscriber.isReadOnly=!0:subscriber.isReadOnly=!1,tempSubs.push(subscriber)}),tempSubs},vm.getAddablePatients=function(patients){var tempPats=[];return angular.forEach(patients,function(patient){vm.containsPatient(vm.coursePatients,patient._id)?patient.isReadOnly=!0:patient.isReadOnly=!1,tempPats.push(patient)}),tempPats},vm.contains=function(array,item){for(var i=0;i<array.length;i++)if(array[i]._id._id===item)return!0;return!1},vm.containsPatient=function(array,item){for(var i=0;i<array.length;i++)if(array[i]._id===item)return!0;return!1},vm.addStudents=function(subscribers){angular.forEach(subscribers,function(subscriber){if(subscriber.selected){var student={};student._id=subscriber._id,student.status="Pending",vm.course.students.push(student)}}),vm.update("Student Added")},vm.addPatients=function(patients){angular.forEach(patients,function(nPatient){if(nPatient.selected){var patient={};patient._id=nPatient._id,vm.course.patients.push(patient)}}),vm.update("Patient Added")},vm.removeStudent=function(index){vm.course.students.splice(index,1),vm.courseStudents.splice(index,1),vm.update("Student removed")},vm.removePatient=function(index){vm.course.patients.splice(index,1),vm.coursePatients.splice(index,1),vm.update("Patient removed")},vm.updateStudentStatus=function(student,index){vm.course.students[index]=student,vm.update("Student status updated")},vm.update=function(action){vm.course.$update(function(res){toastService.simpleToast(action),init()},function(err){toastService.simpleToast("Oops, something went wrong.")})},vm.createRequest=function(){if(!vm.exist(vm.course.request)){var requestData={for_id:vm.course._id,type:"Course",user:vm.authentication.user._id};generateRequest.courseRequest(requestData).then(function(request){vm.course.request=request.data.request,toastService.simpleToast("Join ID successfully generated!")},function(error){vm.error="Failed to generate course join ID. "})}},init()}angular.module("courses").controller("CoursesController",CoursesController),CoursesController.$inject=["$scope","$state","Authentication","courseResolve","DataFactory","confirmDialog","generateRequest","toastService","$mdDialog"]}(),function(){"use strict";function JoinCourseController(){}angular.module("courses").controller("JoinCourseController",JoinCourseController),JoinCourseController.$inject=[]}(),function(){"use strict";function CoursesListController(CoursesService,Authentication){var vm=this;vm.authentication=Authentication,vm.courses=CoursesService.query(),vm.user={},vm.user.name=vm.authentication.user.displayName,vm.user.role=vm.authentication.user.roles,vm.user.canCreate=function(){var hasPermission=!1;return"admin"!==vm.authentication.user.roles[0]&&"teacher"!==vm.authentication.user.roles[0]||(hasPermission=!0),hasPermission},vm.user.canJoin=function(){var hasPermission=!1;return"student"===vm.authentication.user.roles[0]&&(hasPermission=!0),hasPermission}}angular.module("courses").controller("CoursesListController",CoursesListController),CoursesListController.$inject=["CoursesService","Authentication"]}(),function(){"use strict";function CoursesService($resource){return $resource("api/courses/:courseId",{courseId:"@_id"},{update:{method:"PUT"},countCourses:{method:"GET",url:"/api/courses/count",isArray:!1}})}angular.module("courses").factory("CoursesService",CoursesService),CoursesService.$inject=["$resource"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("institutions",{"abstract":!0,url:"/institutions",template:"<ui-view/>"}).state("institutions.list",{url:"",templateUrl:"modules/institutions/client/views/list-institutions.client.view.html",controller:"InstitutionsListController",controllerAs:"vm",data:{pageTitle:"Institutions List"}}).state("institutions.create",{url:"/create",templateUrl:"modules/institutions/client/views/form-institution.client.view.html",controller:"InstitutionsController",controllerAs:"vm",resolve:{institutionResolve:newInstitution},data:{roles:["admin"],pageTitle:"Institutions Create"}}).state("institutions.edit",{url:"/:institutionId/edit",templateUrl:"modules/institutions/client/views/form-institution.client.view.html",controller:"InstitutionsController",controllerAs:"vm",resolve:{institutionResolve:getInstitution},data:{roles:["admin"],pageTitle:"Edit Institution {{ institutionResolve.name }}"}}).state("institutions.view",{url:"/:institutionId",templateUrl:"modules/institutions/client/views/view-institution.client.view.html",controller:"InstitutionsController",controllerAs:"vm",resolve:{institutionResolve:getInstitution},data:{pageTitle:"Institution {{ articleResolve.name }}"}})}function getInstitution($stateParams,InstitutionsService){return InstitutionsService.get({institutionId:$stateParams.institutionId}).$promise}function newInstitution(InstitutionsService){return new InstitutionsService}angular.module("institutions").config(routeConfig),routeConfig.$inject=["$stateProvider"],getInstitution.$inject=["$stateParams","InstitutionsService"],newInstitution.$inject=["InstitutionsService"]}(),function(){"use strict";function InstitutionsController($scope,$window,$state,Authentication,institution,$mdDialog,confirmDialog,generateRequest,DataFactory,toastService){function init(){vm.institution._id&&(vm.institution.isCurrentUserOwner=vm.isCurrentUserOwner,vm.institution.teachers.length&&DataFactory.getData("institutions",vm.institution._id).then(function(res){vm.institutionTeachers=res.teachers;for(var i=0;i<vm.institutionTeachers.length;i++)vm.institutionTeachers[i].statusUnchanged=!0},function(err){vm.error=err}))}function remove(){confirm("Are you sure you want to delete?")&&vm.institution.$remove($state.go("institutions.list"))}function save(isValid){function successCallback(res){$state.go("institutions.view",{institutionId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.institution._id?vm.institution.$update(successCallback,errorCallback):vm.institution.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.institutionForm"),!1)}var vm=this;vm.authentication=Authentication,vm.institution=institution,vm.institutionTeachers=[],vm.subscribers=[],vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.statusOpts=[{ID:1,label:"Active",value:!0},{ID:2,label:"Inactive",value:!1}],vm.teacherStatusOpts=[{id:1,value:"Pending"},{id:2,value:"Approved"},{id:3,value:"Denied"}],vm.exist=function(value){return!(null===value||""===value||void 0===value)},vm.institution._id&&(vm.isCurrentUserOwner=institution.isCurrentUserOwner),vm.exist(vm.institution.request)&&(vm.subscribers=vm.institution.request.subscribers),vm.openSubscribersDialog=function(){var subscribers=vm.getAddableSubscribers(vm.subscribers);$mdDialog.show({clickOutsideToClose:!1,templateUrl:"modules/requests/client/views/dialogs/subs-table.client.template.html",controller:["$scope","$mdDialog","subscribers",function($scope,$mdDialog,subscribers){$scope.subscribers=subscribers,$scope.ok=function(){vm.addTeachers(subscribers),$mdDialog.hide()},$scope.cancel=function(){$mdDialog.cancel()}}],locals:{subscribers:subscribers},parent:angular.element(document.body)})},vm.getAddableSubscribers=function(subscribers){var tempSubs=[];return angular.forEach(subscribers,function(subscriber){vm.contains(vm.institutionTeachers,subscriber._id)?subscriber.isReadOnly=!0:subscriber.isReadOnly=!1,tempSubs.push(subscriber)}),tempSubs},vm.contains=function(array,item){for(var i=0;i<array.length;i++)if(array[i]._id._id===item)return!0;return!1},vm.addTeachers=function(subscribers){angular.forEach(subscribers,function(subscriber){if(subscriber.selected){var teacher={};teacher._id=subscriber._id,teacher.status="Pending",vm.institution.teachers.push(teacher)}}),vm.update("added")},vm.removeTeacher=function(index){vm.institution.teachers.splice(index,1),vm.institutionTeachers.splice(index,1),vm.update("removed")},vm.updateTeacherStatus=function(teacher,index){vm.institution.teachers[index]=teacher,vm.update("status updated")},vm.update=function(action){vm.institution.$update(function(){toastService.simpleToast("Teacher "+action),init()},function(err){toastService.simpleToast(err)})},vm.createRequest=function(){if(!vm.exist(vm.institution.request)){var requestData={for_id:vm.institution._id,type:"Institution",user:vm.authentication.user._id};generateRequest.institutionRequest(requestData).then(function(request){vm.institution.request=request.data.request,toastService.simpleToast("Join ID successfully generated!")},function(error){vm.status="Failed to generate institution join ID. "})}},init()}angular.module("institutions").controller("InstitutionsController",InstitutionsController),InstitutionsController.$inject=["$scope","$window","$state","Authentication","institutionResolve","$mdDialog","confirmDialog","generateRequest","DataFactory","toastService"]}(),function(){"use strict";function JoinInstitutionController(){}angular.module("institutions").controller("JoinInstitutionController",JoinInstitutionController),JoinInstitutionController.$inject=[]}(),function(){"use strict";function InstitutionsListController(InstitutionsService){var vm=this;vm.institutions=InstitutionsService.query()}angular.module("institutions").controller("InstitutionsListController",InstitutionsListController),InstitutionsListController.$inject=["InstitutionsService"]}(),function(){"use strict";function InstitutionsService($resource){return $resource("api/institutions/:institutionId",{institutionId:"@_id"},{update:{method:"PUT"}})}angular.module("institutions").factory("InstitutionsService",InstitutionsService),InstitutionsService.$inject=["$resource"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("keys",{"abstract":!0,url:"/keys",template:"<ui-view/>"}).state("keys.list",{url:"",templateUrl:"modules/keys/client/views/list-keys.client.view.html",controller:"KeysListController",controllerAs:"vm",data:{roles:["admin"],pageTitle:"Keys List"}}).state("keys.create",{url:"/create",templateUrl:"modules/keys/client/views/form-key.client.view.html",controller:"KeysController",controllerAs:"vm",resolve:{keyResolve:newKey},data:{roles:["admin"],pageTitle:"Keys Create"}}).state("keys.edit",{url:"/:keyId/edit",templateUrl:"modules/keys/client/views/form-key.client.view.html",controller:"KeysController",controllerAs:"vm",resolve:{keyResolve:getKey},data:{roles:["admin"],pageTitle:"Edit Key {{ keyResolve.name }}"}}).state("keys.view",{url:"/:keyId",templateUrl:"modules/keys/client/views/view-key.client.view.html",controller:"KeysController",controllerAs:"vm",resolve:{keyResolve:getKey},data:{roles:["admin"],pageTitle:"Key {{ articleResolve.name }}"}})}function getKey($stateParams,KeysService){return KeysService.get({keyId:$stateParams.keyId}).$promise}function newKey(KeysService){return new KeysService}angular.module("keys").config(routeConfig),routeConfig.$inject=["$stateProvider"],getKey.$inject=["$stateParams","KeysService"],newKey.$inject=["KeysService"]}(),function(){"use strict";function KeysController($scope,$state,Authentication,key){function remove(){confirm("Are you sure you want to delete?")&&vm.key.$remove($state.go("keys.list"))}function save(isValid){function successCallback(res){$state.go("keys.view",{keyId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.key._id?vm.key.$update(successCallback,errorCallback):vm.key.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.keyForm"),!1)}var vm=this;vm.authentication=Authentication,vm.key=key,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.statusOpts=[{label:"Active",value:!0},{label:"Inactive",value:!1}],vm.keyTypeOpts=[{value:"Trial"},{value:"Beta Tester"},{value:"Single Session"},{value:"Annual License"}],vm.date=new Date,vm.minStartDate=vm.date,vm.maxStartDate="",vm.minEndDate=vm.date.setDate((new Date).getDate()+1),vm.maxEndDate="",vm.exist=function(value){return!(null===value||""===value||void 0===value)},vm.exist(vm.key.activationDate)?vm.key.activationDate=new Date(vm.key.activationDate):vm.key.activationDate=new Date,vm.exist(vm.key.expirationDate)?vm.key.expirationDate=new Date(vm.key.expirationDate):vm.key.expirationDate=new Date}angular.module("keys").controller("KeysController",KeysController),KeysController.$inject=["$scope","$state","Authentication","keyResolve"]}(),function(){"use strict";function KeysListController(KeysService){var vm=this;vm.keys=KeysService.query()}angular.module("keys").controller("KeysListController",KeysListController),KeysListController.$inject=["KeysService"]}(),function(){"use strict";function KeysService($resource){return $resource("api/keys/:keyId",{keyId:"@_id"},{update:{method:"PUT"}})}angular.module("keys").factory("KeysService",KeysService),KeysService.$inject=["$resource"]}(),function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Medications",state:"medications",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","medications",{title:"List Medications",state:"medications.list"}),Menus.addSubMenuItem("topbar","medications",{title:"Create Medication",state:"medications.create",roles:["user"]})}angular.module("medications").run(menuConfig),menuConfig.$inject=["menuService"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("medications",{"abstract":!0,url:"/medications",template:"<ui-view/>"}).state("medications.list",{url:"",templateUrl:"modules/medications/client/views/list-medications.client.view.html",controller:"MedicationsListController",controllerAs:"vm",data:{pageTitle:"Medications List"}}).state("medications.create",{url:"/create",templateUrl:"modules/medications/client/views/form-medication.client.view.html",controller:"MedicationsController",controllerAs:"vm",resolve:{medicationResolve:newMedication},data:{roles:["teacher","admin"],pageTitle:"Medications Create"}}).state("medications.edit",{url:"/:medicationId/edit",templateUrl:"modules/medications/client/views/form-medication.client.view.html",controller:"MedicationsController",controllerAs:"vm",resolve:{medicationResolve:getMedication},data:{roles:["teacher","admin"],pageTitle:"Edit Medication {{ medicationResolve.name }}"}}).state("medications.view",{url:"/:medicationId",templateUrl:"modules/medications/client/views/view-medication.client.view.html",controller:"MedicationsController",controllerAs:"vm",resolve:{medicationResolve:getMedication},data:{pageTitle:"Medication {{ articleResolve.name }}"}})}function getMedication($stateParams,MedicationsService){return MedicationsService.get({medicationId:$stateParams.medicationId}).$promise}function newMedication(MedicationsService){return new MedicationsService}angular.module("medications").config(routeConfig),routeConfig.$inject=["$stateProvider"],getMedication.$inject=["$stateParams","MedicationsService"],newMedication.$inject=["MedicationsService"]}(),function(){"use strict";function MedicationsListController(MedicationsService){var vm=this;vm.medications=MedicationsService.query()}angular.module("medications").controller("MedicationsListController",MedicationsListController),MedicationsListController.$inject=["MedicationsService"]}(),function(){"use strict";function MedicationsController($scope,$state,Authentication,medication,$mdDialog){function remove(){confirm("Are you sure you want to delete?")&&vm.medication.$remove($state.go("medications.list"))}function save(isValid){function successCallback(res){$state.go("medications.view",{medicationId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.medication._id?(vm.medication.updated=new Date,vm.medication.$update(successCallback,errorCallback)):vm.medication.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.medicationForm"),!1)}var vm=this;vm.authentication=Authentication,vm.medication=medication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.statusOpts=[{ID:1,label:"Active",value:!0},{ID:2,label:"Inactive",value:!1}],vm.medTypes=[{ID:1,value:"Generic"},{ID:2,value:"Brand"},{ID:3,value:"Fictitious"}],vm.pregnancyCategories=[{ID:1,value:"Category A"},{ID:2,value:"Category B"},{ID:3,value:"Category C"},{ID:4,value:"Category D"},{ID:5,value:"Category X"},{ID:6,value:"Category N"}],vm.bcOpts={width:1,height:55,displayValue:!0,font:"monospace",textAlign:"center",fontSize:15},vm.printBarcode=function(medication){$mdDialog.show({templateUrl:"modules/medications/client/views/dialogs/medication-barcode.client.dialog.html",controller:["$scope","$mdDialog","medication",function($scope,$mdDialog,medication){$scope.medication=medication,$scope.bcOpts={width:1,height:55,displayValue:!0,font:"monospace",textAlign:"center",fontSize:15},$scope.ok=function(){$mdDialog.hide()},$scope.cancel=function(){$mdDialog.cancel()}}],locals:{medication:medication},parent:angular.element(document.body)})}}angular.module("medications").controller("MedicationsController",MedicationsController),MedicationsController.$inject=["$scope","$state","Authentication","medicationResolve","$mdDialog"]}(),function(){"use strict";function MedicationsService($resource){return $resource("api/medications/:medicationId",{medicationId:"@_id"},{update:{method:"PUT"}})}angular.module("medications").factory("MedicationsService",MedicationsService),MedicationsService.$inject=["$resource"]}(),function(){"use strict";function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Patients",state:"patients",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","patients",{title:"List Patients",state:"patients.list"}),Menus.addSubMenuItem("topbar","patients",{title:"Create Patient",state:"patients.create",roles:["user"]})}angular.module("patients").run(menuConfig),menuConfig.$inject=["menuService"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("patient-lookup",{url:"/patient-lookup",templateUrl:"modules/patients/client/views/lookup-patient.client.view.html",controller:"LookupPatientController",controllerAs:"vm",data:{roles:["student","teacher","admin"],pageTitle:"Patient Lookup"}}).state("patients",{"abstract":!0,url:"/patients",template:"<ui-view/>"}).state("patients.list",{url:"",templateUrl:"modules/patients/client/views/list-patients.client.view.html",controller:"PatientsListController",controllerAs:"vm",data:{pageTitle:"Patients List"}}).state("patients.create",{url:"/create",templateUrl:"modules/patients/client/views/form-patient.client.view.html",controller:"PatientsController",controllerAs:"vm",resolve:{patientResolve:newPatient},data:{roles:["teacher","admin"],pageTitle:"Patients Create"}}).state("patients.edit",{url:"/:patientId/edit",templateUrl:"modules/patients/client/views/form-patient.client.view.html",controller:"PatientsController",controllerAs:"vm",resolve:{patientResolve:getPatient},data:{roles:["teacher","admin"],pageTitle:"Edit Patient {{ patientResolve.name }}"}}).state("patients.emar",{url:"/:patientId/emar",templateUrl:"modules/patients/client/views/emar-patient.client.view.html",controller:"PatientEmarController",controllerAs:"vm",resolve:{patientResolve:getPatient},data:{roles:["student","teacher","admin"],pageTitle:"EMAR"}}).state("patients.medications",{url:"/:patientId/medications",templateUrl:"modules/patients/client/views/medications/list-patientMedications.client.view.html",controller:"PatientMedicationsController",controllerAs:"vm",resolve:{patientResolve:getPatient},data:{roles:["teacher","admin"],pageTitle:"Patient Medications"}}).state("patients.view",{url:"/:patientId",templateUrl:"modules/patients/client/views/view-patient.client.view.html",controller:"PatientsController",controllerAs:"vm",resolve:{patientResolve:getPatient},data:{pageTitle:"Patient {{ articleResolve.name }}"}})}function getPatient($stateParams,PatientsService){return PatientsService.get({patientId:$stateParams.patientId}).$promise}function newPatient(PatientsService){return new PatientsService}angular.module("patients").config(routeConfig),routeConfig.$inject=["$stateProvider"],getPatient.$inject=["$stateParams","PatientsService"],newPatient.$inject=["PatientsService"]}(),function(){"use strict";function PatientsListController(PatientsService){var vm=this;vm.patients=PatientsService.query()}angular.module("patients").controller("PatientsListController",PatientsListController),PatientsListController.$inject=["PatientsService"]}(),function(){"use strict";function LookupPatientController($scope,$location,Authentication,DataFactory){function init(){vm.authentication.user.courses.length&&angular.forEach(vm.authentication.user.courses,function(course){DataFactory.getData("courses",course).then(function(res){var course={};course._id=res._id,course.active=res.active,course.name=res.name,course.patients=res.patients,vm.courses.push(course)},function(err){vm.error=err})}),vm.authentication.user._id&&"teacher"===vm.authentication.user.roles[0]&&DataFactory.getList("courses").then(function(res){vm.courseDataIfTeacher(res)},function(err){vm.error=err})}var vm=this;vm.authentication=Authentication,vm.courses=[],vm.error=null,vm.courseDataIfTeacher=function(courses){angular.forEach(courses,function(course){DataFactory.getData("courses",course._id).then(function(res){var course={};course._id=res._id,course.active=res.active,course.name=res.name,course.patients=res.patients,vm.courses.push(course)},function(err){vm.error=err})})},vm.lookupPatient=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","pLookupForm"),!1;var id=vm.pID,course=vm.course,index=vm.contains(course.patients,id);if(index>=0){var patient=course.patients[index];patient.active?$location.path("patients/"+patient._id+"/emar"):vm.error='Patient : "'+patient.firstName+" "+patient.lastName+'" is NOT active.'}else vm.error='Patient ID : "'+id+'" NOT found in '+course.name},vm.contains=function(array,item){for(var i=0;i<array.length;i++)if(array[i]._id===item)return i;return-1},init()}angular.module("patients").controller("LookupPatientController",LookupPatientController),LookupPatientController.$inject=["$scope","$location","Authentication","DataFactory"]}(),function(){"use strict";function PatientEmarController($scope,Authentication,patient,rtCalcService,DataFactory,dialogService,toastService){function init(){DataFactory.getData("patients",vm.patient._id).then(function(res){vm.patientMedications=res.medications},function(err){vm.error=err})}var vm=this;vm.authentication=Authentication,vm.patient=patient,vm.patientMedications=[],vm.calcAge=function(dateStr){return vm.exist(dateStr)?rtCalcService.calcAge(dateStr):0},vm.calcFt=function(value){return vm.exist(value)?rtCalcService.calcFt(value):"0' 0\""},vm.calcLb=function(value){return vm.exist(value)?rtCalcService.calcLb(value):0},vm.calcBMI=function(kg,cm){return vm.bmi=rtCalcService.calcBMI(kg,cm),rtCalcService.calcBMI(kg,cm)},vm.textBMI=function(bmi){return rtCalcService.textBMI(bmi)},vm.calcAmt=function(str,dose,amt){return vm.exist(str)&&vm.exist(dose)&&vm.exist(amt)?rtCalcService.calcAmt(str,dose,amt):amt},vm.exist=function(value){return!(null===value||""===value||void 0===value)},vm.verify5Rights=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.form.meduScanForm"),!1;var id=vm.scan,patient=vm.patient,index=vm.rightMedication(vm.patientMedications,id);if(index<0)alert.msg='Medication : "'+id+'" NOT found for patient : "'+patient.firstName+" "+patient.lastName+'".',dialogService.simpleAlert(alert);else{var medication=vm.patientMedications[index];medication.triggerScenario||medication.given||patient.pregnant||"onTime"!==vm.rightTime(medication.time,patient.scenarioTime)||"correct"!==vm.rightDose(medication._id.strength,medication.dose)?patient.pregnant?vm.resultOfPregnancyCategory(medication,index):vm.resultOfTriggerScenarioAlert(medication,index):vm.giveMedication(index)}},vm.giveMedication=function(index){vm.patientMedications[index].given=!0,vm.patientMedications[index].givenTime=new Date,toastService.simpleToast(vm.patientMedications[index]._id.name+" administered @: "+vm.patientMedications[index].givenTime+".")},vm.rightMedication=function(patientMedications,id){for(var index=-1,i=0;i<patientMedications.length;i++)if(patientMedications[i]._id._id===id)return i;return index},vm.rightTime=function(giveTime,scenarioTime){var time="",gt=new Date(giveTime),st=new Date(scenarioTime);return gt.getHours()>st.getHours()+2&&(time="late"),gt.getHours()<st.getHours()-2?time="early":gt.getHours()>=st.getHours()-2&&gt.getHours()<=st.getHours()+2&&(time="onTime"),time},vm.rightDose=function(str,dose){var doseReq="";return dose>str&&(doseReq="needMore"),dose<str?doseReq="needLess":dose===str&&(doseReq="correct"),doseReq},vm.resultOfPregnancyCategory=function(medication,index){var alert={};alert.title="Alert - Pregnancy Category",alert.question="Would you like to give anyway?",alert.medication=medication;var pc=medication._id.pregnancyCategory;"Category C"===pc||"Category D"===pc||"Category X"===pc||"Category N"===pc?(alert.msg="Warning patient is pregnant, and this medication is labeled with Pregnancy "+pc+". ",dialogService.alert(alert).then(function(give){give&&vm.resultOfTriggerScenarioAlert(medication,index)},function(){})):vm.resultOfTriggerScenarioAlert(medication,index)},vm.resultOfTriggerScenarioAlert=function(medication,index){var alert={};alert.title="Alert",alert.question="Would you like to give anyway?",alert.medication=medication,medication.triggerScenario?(alert.msg=medication.scenarioAlertMsg,dialogService.alert(alert).then(function(give){give&&vm.resultOfAlreadyGivenAlert(medication,index)},function(){})):vm.resultOfAlreadyGivenAlert(medication,index)},vm.resultOfAlreadyGivenAlert=function(medication,index){var alert={};alert.title="Alert - Already Given",alert.question="Would you like to give anyway?",alert.medication=medication,medication.given?(alert.msg="Warning this medication already been given to "+patient.firstName+" "+patient.lastName+"@ : "+medication.time,dialogService.alert(alert).then(function(give){give&&vm.resultOfWrongTimeAlert(medication,index)},function(){})):vm.resultOfWrongTimeAlert(medication,index)},vm.resultOfWrongTimeAlert=function(medication,index){var alert={};alert.title="Alert - Medication Early/Late",alert.question="Would you like to give anyway?",alert.medication=medication;var time=vm.rightTime(medication.time,patient.scenarioTime);"early"===time&&(alert.msg="This medication is early."),"late"===time&&(alert.msg="This medication is late."),"onTime"!==time?dialogService.alert(alert).then(function(give){give&&vm.resultOfWrongDoseAlert(medication,index)},function(){}):vm.resultOfWrongDoseAlert(medication,index)},vm.resultOfWrongDoseAlert=function(medication,index){var alert={};alert.medication=medication;var dose=vm.rightDose(medication._id.strength,medication.dose),amt=vm.calcAmt(medication._id.strength,medication.dose,medication._id.amount);if("needMore"===dose){var xMore=medication.dose-medication._id.strength;alert.msg="The strength of this medication is "+medication._id.strength+" "+medication._id.unit+". The dose required for this medication is: "+medication.dose+" "+medication._id.unit+". You must ADD "+xMore+" "+medication._id.unit+" to administer the correct dosage."}if("needLess"===dose){var xLess=medication._id.strength-medication.dose;alert.msg="The strength of this medication is "+medication._id.strength+" "+medication._id.unit+". The dose required for this medication is: "+medication.dose+" "+medication._id.unit+". You must REMOVE "+xLess+" "+medication._id.unit+" to administer the correct dosage."}"correct"!==dose?(alert.title="Alert - Amount Adjustment Required",alert.instructions="Please administer a total of "+amt+" "+medication._id.form+". ",dialogService.alert(alert).then(function(give){give&&vm.giveMedication(index)},function(){})):vm.giveMedication(index)},init()}angular.module("patients").controller("PatientEmarController",PatientEmarController),PatientEmarController.$inject=["$scope","Authentication","patientResolve","rtCalcService","DataFactory","dialogService","toastService"]}(),function(){"use strict";function PatientMedicationsController($scope,Authentication,patient,$mdDialog,DataFactory,rtCalcService,toastService){function init(){DataFactory.getData("patients",vm.patient._id).then(function(res){vm.patientMedications=res.medications},function(err){vm.error=err})}var vm=this;vm.authentication=Authentication,vm.patient=patient,vm.patientMedications=[],vm.error=null,vm.form={},vm.exist=function(value){return!(null===value||""===value||void 0===value)},vm.calcAmt=function(str,dose,amt){return vm.exist(str)&&vm.exist(dose)&&vm.exist(amt)?rtCalcService.calcAmt(str,dose,amt):amt},vm.dialogPatientMedForm=function(action,patient,medication,index){$mdDialog.show({clickOutsideToClose:!1,templateUrl:"modules/patients/client/views/medications/dialogs/form-patientMedication.client.view.html",controller:["$scope","$mdDialog","action","patient","medication","index","rtCalcService",function($scope,$mdDialog,action,patient,medication,index,rtCalcService){$scope.patient=patient,$scope.medication=medication,$scope.action=action,index>=0&&($scope.patient.medication=patient.medications[index],$scope.patient.medication.time=new Date(patient.medications[index].time)),$scope.medTypeOpts=[{ID:1,value:"Scheduled"},{ID:2,value:"PRN"},{ID:3,value:"Stat/1x"},{ID:4,value:"IV Fluid"}],$scope.exist=function(value){return!(null===value||""===value||void 0===value)},$scope.calcAge=function(dateStr){return $scope.exist(dateStr)?rtCalcService.calcAge(dateStr):0},$scope.ok=function(pMed){"Add"===action?(pMed._id=medication._id,vm.addPatientMed(pMed)):"Update"===action&&vm.updatePatientMed(pMed,index),$mdDialog.cancel()},$scope.cancel=function(){$scope.pMedForm.$setPristine(),$scope.pMedForm.$setUntouched(),$mdDialog.cancel()}}],locals:{index:index,action:action,patient:patient,medication:medication},parent:angular.element(document.body)})},vm.addPatientMed=function(pMed){vm.patient.medications.push(pMed),vm.update("added")},vm.removePatientMed=function(index){vm.patient.medications.splice(index,1),vm.update("removed")},vm.updatePatientMed=function(pMed,index){vm.patient.medications[index]=pMed,vm.update("updated")},vm.update=function(action){vm.patient.updated=Date.now(),vm.patient.$update(function(){toastService.simpleToast("Medication "+action),init()},function(err){toastService.simpleToast("Oops something went wrong.")})},vm.lookupMed=function(mID){vm.alreadyAdded(vm.patient.medications,mID)?vm.error='Medication ID: "'+mID+'" has already been added to this patient.':DataFactory.getDataPromise("medications",mID).then(function(res){
var med=res.data;med&&!med.active?vm.error='"'+med.name+'" is NOT active. Please change the medication\'s status from "inactive" to "active" to add this medication.':(vm.closeDialogLookupMed(),vm.dialogPatientMedForm("Add",vm.patient,med,-1),vm.error=null)},function(err){vm.error='Medication ID : "'+mID+'" NOT found. \nPlease make sure to add the medication to the medications database first.'})},vm.dialogLookupMed=function(){$mdDialog.show({clickOutsideToClose:!1,templateUrl:"modules/patients/client/views/medications/dialogs/lookup-medication.client.dialog.html",scope:$scope,preserveScope:!0,parent:angular.element(document.body)}),vm.okDialogLookupMed=function(mID){vm.lookupMed(mID)},vm.closeDialogLookupMed=function(){$mdDialog.cancel(),vm.mID=""}},vm.alreadyAdded=function(patientMedications,scannedId){for(var found=!1,i=0;i<patientMedications.length;i++)if(patientMedications[i]._id===scannedId){found=!0;break}return found},init()}angular.module("patients").controller("PatientMedicationsController",PatientMedicationsController),PatientMedicationsController.$inject=["$scope","Authentication","patientResolve","$mdDialog","DataFactory","rtCalcService","toastService"]}(),function(){"use strict";function PatientsController($scope,$state,Authentication,patient,rtCalcService,$mdDialog){function remove(){confirm("Are you sure you want to delete?")&&vm.patient.$remove($state.go("patients.list"))}function save(isValid){function successCallback(res){$state.go("patients.view",{patientId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.patient._id?(vm.patient.updated=new Date,vm.patient.$update(successCallback,errorCallback)):vm.patient.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.patientForm"),!1)}var vm=this;vm.authentication=Authentication,vm.patient=patient,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.statusOpts=[{ID:1,label:"Active",value:!0},{ID:2,label:"Inactive",value:!1}],vm.calcAge=function(dateStr){return vm.exist(dateStr)?rtCalcService.calcAge(dateStr):0},vm.calcFt=function(value){return vm.exist(value)?rtCalcService.calcFt(value):"0' 0\""},vm.calcLb=function(value){return vm.exist(value)?rtCalcService.calcLb(value):0},vm.calcBMI=function(kg,cm){return vm.bmi=rtCalcService.calcBMI(kg,cm),rtCalcService.calcBMI(kg,cm)},vm.textBMI=function(bmi){return rtCalcService.textBMI(bmi)},vm.exist=function(value){return!(null===value||""===value||void 0===value)},vm.exist(vm.patient.scenarioTime)?vm.patient.scenarioTime=new Date(vm.patient.scenarioTime):vm.patient.scenarioTime=new Date,vm.exist(vm.patient.dob)&&(vm.patient.dob=new Date(vm.patient.dob)),vm.minDate=new Date(1901,1,1),vm.maxDate=new Date,vm.bcOpts={width:1,height:55,displayValue:!0,font:"monospace",textAlign:"center",fontSize:15},vm.printBarcode=function(patient){$mdDialog.show({templateUrl:"modules/patients/client/views/dialogs/patient-barcode.client.dialog.html",controller:["$scope","$mdDialog","patient",function($scope,$mdDialog,patient){$scope.patient=patient,$scope.bcOpts={width:1,height:55,displayValue:!0,font:"monospace",textAlign:"center",fontSize:15},$scope.ok=function(){$mdDialog.hide()},$scope.cancel=function(){$mdDialog.cancel()}}],locals:{patient:patient},parent:angular.element(document.body)})}}angular.module("patients").controller("PatientsController",PatientsController),PatientsController.$inject=["$scope","$state","Authentication","patientResolve","rtCalcService","$mdDialog"]}(),function(){"use strict";function dialogService($mdDialog){var dialog={};return dialog.simpleAlert=function(alert){$mdDialog.show({clickOutsideToClose:!1,templateUrl:"modules/patients/client/views/dialogs/alerts/simple-alert.client.dialog.html",controller:["$scope","$mdDialog","alert",function($scope,$mdDialog,alert){$scope.dialog=alert,$scope.cancel=function(){$mdDialog.cancel()}}],locals:{alert:alert},parent:angular.element(document.body)})},dialog.alert=function(alert){return $mdDialog.show({clickOutsideToClose:!1,templateUrl:"modules/patients/client/views/dialogs/alerts/alert-client.dialog.html",controller:["$scope","$mdDialog","alert",function($scope,$mdDialog,alert){$scope.dialog=alert,$scope.ok=function(){$mdDialog.hide(!0)},$scope.cancel=function(){$mdDialog.cancel(!0)}}],locals:{alert:alert},parent:angular.element(document.body)}).then(function(ans){return ans},function(){return!1})},dialog}angular.module("patients").factory("dialogService",dialogService),dialogService.$inject=["$mdDialog"]}(),function(){"use strict";function PatientsService($resource){return $resource("api/patients/:patientId",{patientId:"@_id"},{update:{method:"PUT"}})}angular.module("patients").factory("PatientsService",PatientsService),PatientsService.$inject=["$resource"]}(),function(){"use strict";function rtCalcService(){var calcService={};return calcService.calcAge=function(dateString){var today=new Date,birthDate=new Date(dateString),age=today.getFullYear()-birthDate.getFullYear(),m=today.getMonth()-birthDate.getMonth();return(m<0||0===m&&today.getDate()<birthDate.getDate())&&age--,age},calcService.calcFt=function(value){parseInt(value/30.48,10),(value/30.48%1).toFixed(1).toString().split(".")[1];return parseInt(value/30.48,10)+"' "+(value/30.48%1).toFixed(1).toString().split(".")[1]+"''"},calcService.calcLb=function(value){parseInt(2.2046*value,10);return parseInt(2.2046*value,10)},calcService.calcBMI=function(kg,cm){var m=cm/100;return(kg/(m*m)).toFixed(1)},calcService.textBMI=function(bmi){var bmiText="";return bmi<18.5&&(bmiText="Underweight"),bmi>18.5&&bmi<24.9&&(bmiText="Normal Weight"),bmi>25&&bmi<29.9&&(bmiText="Overweight"),bmi>30&&(bmiText="Obese"),bmiText},calcService.calcAmt=function(str,dose,amt){var newAmt=dose/str*amt;return newAmt%1===0?newAmt:newAmt.toFixed(2)},calcService}angular.module("patients").factory("rtCalcService",rtCalcService),rtCalcService.$inject=[]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("request-join",{url:"/request-join",templateUrl:"modules/requests/client/views/request-join.client.view.html",controller:"RequestJoinController",controllerAs:"vm",data:{roles:["user","student","teacher","admin"],pageTitle:"Request Join"}}).state("requests",{"abstract":!0,url:"/requests",template:"<ui-view/>"}).state("requests.list",{url:"",templateUrl:"modules/requests/client/views/list-requests.client.view.html",controller:"RequestsListController",controllerAs:"vm",data:{pageTitle:"Requests List"}}).state("requests.create",{url:"/create",templateUrl:"modules/requests/client/views/form-request.client.view.html",controller:"RequestsController",controllerAs:"vm",resolve:{requestResolve:newRequest},data:{roles:["user","student","teacher","admin"],pageTitle:"Requests Create"}}).state("requests.edit",{url:"/:requestId/edit",templateUrl:"modules/requests/client/views/form-request.client.view.html",controller:"RequestsController",controllerAs:"vm",resolve:{requestResolve:getRequest},data:{roles:["user","student","teacher","admin"],pageTitle:"Edit Request {{ requestResolve.name }}"}}).state("requests.view",{url:"/:requestId",templateUrl:"modules/requests/client/views/view-request.client.view.html",controller:"RequestsController",controllerAs:"vm",resolve:{requestResolve:getRequest},data:{pageTitle:"Request {{ articleResolve.name }}"}})}function getRequest($stateParams,RequestsService){return RequestsService.get({requestId:$stateParams.requestId}).$promise}function newRequest(RequestsService){return new RequestsService}angular.module("requests").config(routeConfig),routeConfig.$inject=["$stateProvider"],getRequest.$inject=["$stateParams","RequestsService"],newRequest.$inject=["RequestsService"]}(),function(){"use strict";function RequestsListController(RequestsService){var vm=this;vm.requests=RequestsService.query()}angular.module("requests").controller("RequestsListController",RequestsListController),RequestsListController.$inject=["RequestsService"]}(),function(){"use strict";function RequestJoinController($scope,Authentication,$mdDialog,subscribeRequest,toastService){var vm=this;vm.authentication=Authentication,vm.request=[],vm.course=[],vm.institution=[],vm.error=null,vm.form={},vm.lookupRequestId=function(isValid){return isValid?void subscribeRequest.getRequest(vm.requestId).then(function(request){vm.request=request.data,vm.lookupObjOfRequest(vm.request)},function(error){vm.error="Request ID NOT found. ",vm.requestId=""}):($scope.$broadcast("show-errors-check-validity","requestJForm"),!1)},vm.lookupObjOfRequest=function(request){var object={id:request.for_id,type:request.type};vm.isNewRequest(request._id)?subscribeRequest.getObjOfRequest(object).then(function(reqObj){"Course"===request.type?(vm.course=reqObj.data,vm.joinCourseDialog(vm.course)):"Institution"===request.type&&(vm.institution=reqObj.data,vm.joinInstitutionDialog(vm.institution))},function(error){vm.error=request.type+" NOT found. "}):(vm.error="You have already requested to join this "+request.type+"!",vm.requestId="")},vm.isNewRequest=function(id){var length=vm.authentication.user.requests.length;if(0===length)return!0;for(var i=0;i<length;i++)if(vm.authentication.user.requests[i]===id)return!1;return!0},vm.subscribeTo=function(type){var subscriber=vm.authentication.user._id;subscribeRequest.subscribe(vm.request,subscriber).then(function(response){vm.addRequestTo(vm.authentication.user)},function(error){vm.error="Error requesting subscription to "+type+"."})},vm.addRequestTo=function(user){var request=vm.request;subscribeRequest.addRequestToUser(user,request).then(function(response){toastService.simpleToast("Request to join "+request.type+" successfully processed.")},function(error){toastService.simpleToast("Error Requesting to join "+request.type+",")})},vm.joinCourseDialog=function(course){$mdDialog.show({clickOutsideToClose:!1,templateUrl:"modules/courses/client/views/dialogs/join-course.client.view.html",controller:["$scope","$mdDialog","course",function($scope,$mdDialog,course){$scope.course=course,$scope.ok=function(){vm.subscribeTo("course"),$mdDialog.hide()},$scope.cancel=function(){$mdDialog.cancel()}}],locals:{course:course},parent:angular.element(document.body)})},vm.joinInstitutionDialog=function(institution){$mdDialog.show({clickOutsideToClose:!1,templateUrl:"modules/institutions/client/views/dialogs/join-institution.client.view.html",controller:["$scope","$mdDialog","institution",function($scope,$mdDialog,institution){$scope.institution=institution,$scope.ok=function(){vm.subscribeTo("institution"),$mdDialog.hide()},$scope.cancel=function(){$mdDialog.cancel()}}],locals:{institution:institution},parent:angular.element(document.body)})}}angular.module("requests").controller("RequestJoinController",RequestJoinController),RequestJoinController.$inject=["$scope","Authentication","$mdDialog","subscribeRequest","toastService"]}(),function(){"use strict";function RequestsController($scope,$state,Authentication,request,DataFactory,toastService){function init(){vm.subs=[],angular.forEach(vm.request.subscribers,function(value){vm.subs.push(value)}),vm.getRequestSubscriberData()}function remove(){confirm("Are you sure you want to delete?")&&vm.request.$remove($state.go("requests.list"))}function save(isValid){function successCallback(res){$state.go("requests.view",{requestId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.request._id?vm.request.$update(successCallback,errorCallback):vm.request.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.requestForm"),!1)}var vm=this;vm.authentication=Authentication,vm.request=request,vm.subscribers=[],vm.status=null,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.requestTypeOpts=[{id:1,value:"Course"},{id:2,value:"Institution"},{id:3,value:"Key"}],vm.getRequestSubscriberData=function(){var data="users";angular.forEach(vm.subs,function(sub){var id=sub._id,status=sub.approvalStatus;DataFactory.getData(data,id).then(function(userData){var subData={};subData._id=userData._id,subData.firstName=userData.firstName,subData.lastName=userData.lastName,subData.email=userData.email,subData.approvalStatus=status,vm.subscribers.push(subData)},function(error){vm.status="Failed to retrieve Subscriber Data. "})})},init(),vm.updateSubscriberData=function(){var tempSubArr=[];angular.forEach(vm.subscribers,function(sub){var updatedSub={};updatedSub._id=sub._id,updatedSub.approvalStatus=sub.approvalStatus,tempSubArr.push(updatedSub)}),vm.request.subscribers=tempSubArr,vm.updateRequestData()},vm.updateRequestData=function(){vm.request.$update(function(res){toastService.simpleToast("Subscriber approval status updated.")},function(error){vm.error=error})}}angular.module("requests").controller("RequestsController",RequestsController),RequestsController.$inject=["$scope","$state","Authentication","requestResolve","DataFactory","toastService"]}(),function(){"use strict";function DataFactory($http){var getData=function(data,id){return $http.get("/api/"+data+"/"+id).then(function(response){return response.data},function(error){})},getDataPromise=function(data,id){return $http.get("/api/"+data+"/"+id)},getList=function(data){return $http.get("/api/"+data).then(function(response){return response.data},function(error){})},getListPromise=function(data){return $http.get("/api/"+data)};return{getData:getData,getDataPromise:getDataPromise,getList:getList,getListPromise:getListPromise}}angular.module("requests").factory("DataFactory",DataFactory),DataFactory.$inject=["$http"]}(),function(){"use strict";function generateRequest($http){var courseRequest=function(request){var generatedRequest=null;return $http({method:"POST",url:"/api/requests",data:{for_id:request.for_id,type:request.type,user:request.user}}).then(function(response){return generatedRequest=response.data,$http({method:"PUT",url:"/api/courses/"+request.for_id,data:{request:generatedRequest._id}})})},institutionRequest=function(request){var generatedRequest=null;return $http({method:"POST",url:"/api/requests",data:{for_id:request.for_id,type:request.type,user:request.user}}).then(function(response){return generatedRequest=response.data,$http({method:"PUT",url:"/api/institutions/"+request.for_id,data:{request:generatedRequest._id}})})};return{courseRequest:courseRequest,institutionRequest:institutionRequest}}angular.module("requests").factory("generateRequest",generateRequest),generateRequest.$inject=["$http"]}(),function(){"use strict";function RequestsService($resource){return $resource("api/requests/:requestId",{requestId:"@_id"},{update:{method:"PUT"}})}angular.module("requests").factory("RequestsService",RequestsService),RequestsService.$inject=["$resource"]}(),function(){"use strict";function subscribeRequest($http,RequestsService,UsersService){var getRequest=function(id){return $http.get("/api/requests/"+id)},getObjOfRequest=function(object){return $http.get("/api/"+object.type+"s/"+object.id)},subscribe=function(request,subscriber){var subscriberRequest=new RequestsService(request);return subscriberRequest.subscribers.push(subscriber),subscriberRequest.$update(function(res){},function(error){})},addRequestToUser=function(user,request){var requestUser=new UsersService(user);return requestUser.requests.push(request._id),requestUser.$update(function(res){},function(error){})},addCourseToUser=function(user,courseId){var requestUser=new UsersService(user);return requestUser.courses.push(courseId),requestUser.$update(function(res){},function(error){})},addInstitutionToUser=function(user,institutionId){var requestUser=new UsersService(user);return requestUser.institutions.push(institutionId),requestUser.$update(function(res){},function(error){})};return{getRequest:getRequest,getObjOfRequest:getObjOfRequest,subscribe:subscribe,addRequestToUser:addRequestToUser,addCourseToUser:addCourseToUser,addInstitutionToUser:addInstitutionToUser}}angular.module("requests").factory("subscribeRequest",subscribeRequest),subscribeRequest.$inject=["$http","RequestsService","UsersService"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("tutorials",{"abstract":!0,url:"/tutorials",template:"<ui-view/>"}).state("tutorials.list",{url:"",templateUrl:"modules/tutorials/client/views/list-tutorials.client.view.html",controller:"TutorialsListController",controllerAs:"vm",data:{pageTitle:"Tutorials List"}}).state("tutorials.create",{url:"/create",templateUrl:"modules/tutorials/client/views/form-tutorial.client.view.html",controller:"TutorialsController",controllerAs:"vm",resolve:{tutorialResolve:newTutorial},data:{roles:["admin"],pageTitle:"Tutorials Create"}}).state("tutorials.edit",{url:"/:tutorialId/edit",templateUrl:"modules/tutorials/client/views/form-tutorial.client.view.html",controller:"TutorialsController",controllerAs:"vm",resolve:{tutorialResolve:getTutorial},data:{roles:["admin"],pageTitle:"Edit Tutorial {{ tutorialResolve.name }}"}}).state("tutorials.view",{url:"/:tutorialId",templateUrl:"modules/tutorials/client/views/view-tutorial.client.view.html",controller:"TutorialsController",controllerAs:"vm",resolve:{tutorialResolve:getTutorial},data:{pageTitle:"Tutorial {{ articleResolve.name }}"}})}function getTutorial($stateParams,TutorialsService){return TutorialsService.get({tutorialId:$stateParams.tutorialId}).$promise}function newTutorial(TutorialsService){return new TutorialsService}angular.module("tutorials").config(routeConfig),routeConfig.$inject=["$stateProvider"],getTutorial.$inject=["$stateParams","TutorialsService"],newTutorial.$inject=["TutorialsService"]}(),function(){"use strict";function TutorialsListController(TutorialsService){var vm=this;vm.tutorials=TutorialsService.query()}angular.module("tutorials").controller("TutorialsListController",TutorialsListController),TutorialsListController.$inject=["TutorialsService"]}(),function(){"use strict";function TutorialsController($scope,$state,Authentication,tutorial){function remove(){confirm("Are you sure you want to delete?")&&vm.tutorial.$remove($state.go("tutorials.list"))}function save(isValid){function successCallback(res){$state.go("tutorials.view",{tutorialId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.tutorial._id?vm.tutorial.$update(successCallback,errorCallback):vm.tutorial.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.tutorialForm"),!1)}var vm=this;vm.authentication=Authentication,vm.tutorial=tutorial,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("tutorials").controller("TutorialsController",TutorialsController),TutorialsController.$inject=["$scope","$state","Authentication","tutorialResolve"]}(),function(){"use strict";function TutorialsService($resource){return $resource("api/tutorials/:tutorialId",{tutorialId:"@_id"},{update:{method:"PUT"}})}angular.module("tutorials").factory("TutorialsService",TutorialsService),TutorialsService.$inject=["$resource"]}(),function(){"use strict";function menuConfig(menuService){menuService.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}angular.module("users.admin").run(menuConfig),menuConfig.$inject=["menuService"]}(),function(){"use strict";function routeConfig($stateProvider){function getUser($stateParams,AdminService){return AdminService.get({userId:$stateParams.userId}).$promise}$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController",controllerAs:"vm",data:{pageTitle:"Users List"}}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit {{ userResolve.displayName }}"}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit User {{ userResolve.displayName }}"}}),getUser.$inject=["$stateParams","AdminService"]}angular.module("users.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",controller:"SettingsController",controllerAs:"vm",data:{roles:["user","student","teacher","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html",controller:"EditProfileController",controllerAs:"vm",data:{pageTitle:"Settings"}}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html",controller:"ChangePasswordController",controllerAs:"vm",data:{pageTitle:"Settings password"}}).state("settings.account",{url:"/account",templateUrl:"modules/users/client/views/settings/manage-account-details.client.view.html",controller:"ManageAccountController",controllerAs:"vm",data:{pageTitle:"Manage Account"}}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html",controller:"ChangeProfilePictureController",controllerAs:"vm",data:{pageTitle:"Settings picture"}}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html",controller:"AuthenticationController",controllerAs:"vm"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html",controller:"AuthenticationController",controllerAs:"vm",data:{pageTitle:"Signup"}}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html",controller:"AuthenticationController",controllerAs:"vm",data:{pageTitle:"Signin"}}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password forgot"}}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html",data:{pageTitle:"Password reset invalid"}}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html",data:{pageTitle:"Password reset success"}}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password reset form"}})}angular.module("users.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){"use strict";function UserListController($scope,$filter,AdminService){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=15,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.users,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,AdminService.query(function(data){vm.users=data,vm.buildPager()})}angular.module("users.admin").controller("UserListController",UserListController),UserListController.$inject=["$scope","$filter","AdminService"]}(),function(){"use strict";function UserController($scope,$state,$window,Authentication,user){function remove(user){$window.confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),vm.users.splice(vm.users.indexOf(user),1)):vm.user.$remove(function(){$state.go("admin.users")}))}function update(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;var user=vm.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){vm.error=errorResponse.data.message})}var vm=this;vm.authentication=Authentication,vm.user=user,vm.remove=remove,vm.update=update}angular.module("users.admin").controller("UserController",UserController),UserController.$inject=["$scope","$state","$window","Authentication","userResolve"]}(),function(){"use strict";function AuthenticationController($scope,$state,$http,$location,$window,Authentication,PasswordValidator,toastService){function signup(isValid){return vm.error=null,isValid?void $http.post("/api/auth/signup",vm.credentials).success(function(response){vm.authentication.user=response,toastService.simpleToast("Welcome to MeduSCAN "+response.firstName+"!"),$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){vm.error=response.message}):($scope.$broadcast("show-errors-check-validity","vm.signupForm"),!1)}function signin(isValid){return vm.error=null,isValid?void $http.post("/api/auth/signin",vm.credentials).success(function(response){vm.authentication.user=response,toastService.simpleToast("Welcome back, "+response.firstName+"!"),$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){vm.error=response.message}):($scope.$broadcast("show-errors-check-validity","vm.signinForm"),!1)}function callOauthProvider(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}var vm=this;vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.signup=signup,vm.signin=signin,vm.callOauthProvider=callOauthProvider,vm.error=$location.search().err,vm.authentication.user&&$location.path("/")}angular.module("users").controller("AuthenticationController",AuthenticationController),AuthenticationController.$inject=["$scope","$state","$http","$location","$window","Authentication","PasswordValidator","toastService"]}(),function(){"use strict";function PasswordController($scope,$stateParams,$http,$location,Authentication,PasswordValidator){function askForPasswordReset(isValid){return vm.success=vm.error=null,isValid?void $http.post("/api/auth/forgot",vm.credentials).success(function(response){vm.credentials=null,vm.success=response.message}).error(function(response){vm.credentials=null,vm.error=response.message}):($scope.$broadcast("show-errors-check-validity","vm.forgotPasswordForm"),!1)}function resetUserPassword(isValid){return vm.success=vm.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,vm.passwordDetails).success(function(response){vm.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){vm.error=response.message}):($scope.$broadcast("show-errors-check-validity","vm.resetPasswordForm"),!1)}var vm=this;vm.resetUserPassword=resetUserPassword,vm.askForPasswordReset=askForPasswordReset,vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.authentication.user&&$location.path("/")}angular.module("users").controller("PasswordController",PasswordController),PasswordController.$inject=["$scope","$stateParams","$http","$location","Authentication","PasswordValidator"]}(),function(){"use strict";function ChangePasswordController($scope,$http,Authentication,PasswordValidator){function changeUserPassword(isValid){return vm.success=vm.error=null,isValid?void $http.post("/api/users/password",vm.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","vm.passwordForm"),vm.success=!0,vm.passwordDetails=null}).error(function(response){vm.error=response.message}):($scope.$broadcast("show-errors-check-validity","vm.passwordForm"),!1)}var vm=this;vm.user=Authentication.user,vm.changeUserPassword=changeUserPassword,vm.getPopoverMsg=PasswordValidator.getPopoverMsg}angular.module("users").controller("ChangePasswordController",ChangePasswordController),ChangePasswordController.$inject=["$scope","$http","Authentication","PasswordValidator"]}(),function(){"use strict";function ChangeProfilePictureController($scope,$timeout,$window,Authentication,FileUploader){function onAfterAddingFile(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){vm.imageURL=fileReaderEvent.target.result},0)}}}function onSuccessItem(fileItem,response,status,headers){vm.success=!0,vm.user=Authentication.user=response,cancelUpload()}function onErrorItem(fileItem,response,status,headers){cancelUpload(),vm.error=response.message}function uploadProfilePicture(){vm.success=vm.error=null,vm.uploader.uploadAll()}function cancelUpload(){vm.uploader.clearQueue(),vm.imageURL=vm.user.profileImageURL}var vm=this;vm.user=Authentication.user,vm.imageURL=vm.user.profileImageURL,vm.uploadProfilePicture=uploadProfilePicture,vm.cancelUpload=cancelUpload,vm.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture",onAfterAddingFile:onAfterAddingFile,onSuccessItem:onSuccessItem,onErrorItem:onErrorItem}),vm.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return"|jpg|png|jpeg|bmp|gif|".indexOf(type)!==-1}})}angular.module("users").controller("ChangeProfilePictureController",ChangeProfilePictureController),ChangeProfilePictureController.$inject=["$scope","$timeout","$window","Authentication","FileUploader"]}(),function(){"use strict";function EditProfileController($scope,$http,$location,UsersService,Authentication){function updateUserProfile(isValid){if(vm.success=vm.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;var user=new UsersService(vm.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","vm.userForm"),vm.success=!0,Authentication.user=response},function(response){vm.error=response.data.message})}var vm=this;vm.user=Authentication.user,vm.updateUserProfile=updateUserProfile}angular.module("users").controller("EditProfileController",EditProfileController),EditProfileController.$inject=["$scope","$http","$location","UsersService","Authentication"]}(),function(){"use strict";function ManageAccountController($scope,Authentication,DataFactory,subscribeRequest,toastService){function init(){vm.authentication.user.requests.length&&(vm.getRequestData(),vm.authentication.user.institutions.length&&vm.getInstitutionsData(),vm.authentication.user.courses.length&&vm.getCoursesData())}var vm=this;vm.authentication=Authentication,vm.requests=[],vm.institutions=[],vm.courses=[],vm.getRequestData=function(){angular.forEach(vm.authentication.user.requests,function(request){vm.data={},DataFactory.getData("requests",request).then(function(res){vm.data.for_id=res.for_id,vm.data.type=res.type,vm.data.user=res.user.displayName,"Institution"===res.type?DataFactory.getData(res.type+"s",res.for_id).then(function(res){vm.data.name=res.name;var index=vm.currentUserIndex(res.teachers);index>=0?vm.data.stat=res.teachers[index].status:vm.data.stat="N/A",vm.requests.push(vm.data)},function(err){}):"Course"===res.type&&DataFactory.getData(res.type+"s",res.for_id).then(function(res){vm.data.name=res.name;var index=vm.currentUserIndex(res.students);index>=0?vm.data.stat=res.students[index].status:vm.data.stat="N/A",vm.requests.push(vm.data)},function(err){})},function(err){})})},vm.getInstitutionsData=function(){angular.forEach(vm.authentication.user.institutions,function(request){vm.data={},DataFactory.getData("institutions",request).then(function(res){
vm.data._id=res._id,vm.data.active=res.active,vm.data.name=res.name,vm.data.key="Beta Tester",vm.institutions.push(vm.data)},function(err){})})},vm.getCoursesData=function(){angular.forEach(vm.authentication.user.courses,function(request){vm.data={},DataFactory.getData("courses",request).then(function(res){vm.data._id=res._id,vm.data.active=res.active,vm.data.startDate=res.startDate,vm.data.endDate=res.endDate,vm.data.teacher=res.user.displayName,vm.data.name=res.name,vm.data.key="Beta Tester",vm.courses.push(vm.data)},function(err){})})},vm.currentUserIndex=function(array){for(var id=vm.authentication.user._id,i=0;i<array.length;i++)if(array[i]._id._id===id)return i;return-1},vm.addedToMe=function(type,id){if("Institution"===type){var institutions=vm.authentication.user.institutions;return vm.contains(institutions,id)}if("Course"===type){var courses=vm.authentication.user.courses;return vm.contains(courses,id)}},vm.contains=function(array,item){for(var i=0;i<array.length;i++)if(array[i]===item)return!0;return!1},vm.addToMe=function(type,id){"Institution"===type?subscribeRequest.addInstitutionToUser(vm.authentication.user,id).then(function(res){toastService.simpleToast(type+" Added."),vm.getInstitutionsData()},function(err){toastService.simpleToast("Error adding "+type+".")}):"Course"===type&&subscribeRequest.addCourseToUser(vm.authentication.user,id).then(function(res){toastService.simpleToast(type+" Added."),vm.getCoursesData()},function(err){toastService.simpleToast("Error adding "+type+".")})},init()}angular.module("users").controller("ManageAccountController",ManageAccountController),ManageAccountController.$inject=["$scope","Authentication","DataFactory","subscribeRequest","toastService"]}(),function(){"use strict";function SocialAccountsController($scope,$http,Authentication){function hasConnectedAdditionalSocialAccounts(){return $scope.user.additionalProvidersData&&Object.keys($scope.user.additionalProvidersData).length}function isConnectedSocialAccount(provider){return vm.user.provider===provider||vm.user.additionalProvidersData&&vm.user.additionalProvidersData[provider]}function removeUserSocialAccount(provider){vm.success=vm.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){vm.success=!0,vm.user=Authentication.user=response}).error(function(response){vm.error=response.message})}var vm=this;vm.user=Authentication.user,vm.hasConnectedAdditionalSocialAccounts=hasConnectedAdditionalSocialAccounts,vm.isConnectedSocialAccount=isConnectedSocialAccount,vm.removeUserSocialAccount=removeUserSocialAccount}angular.module("users").controller("SocialAccountsController",SocialAccountsController),SocialAccountsController.$inject=["$scope","$http","Authentication"]}(),function(){"use strict";function SettingsController($scope,Authentication){var vm=this;vm.user=Authentication.user}angular.module("users").controller("SettingsController",SettingsController),SettingsController.$inject=["$scope","Authentication"]}(),function(){"use strict";function passwordValidator(PasswordValidator){function link(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.getPopoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.getPopoverMsg="",scope.passwordErrors=[],status=!0)}return status}}var directive={require:"ngModel",link:link};return directive}angular.module("users").directive("passwordValidator",passwordValidator),passwordValidator.$inject=["PasswordValidator"]}(),function(){"use strict";function passwordVerify(){function link(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin===password})})}var directive={require:"ngModel",scope:{passwordVerify:"="},link:link};return directive}angular.module("users").directive("passwordVerify",passwordVerify)}(),function(){"use strict";function lowercase(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}var directive={require:"ngModel",link:link};return directive}angular.module("users").directive("lowercase",lowercase)}(),function(){"use strict";function Authentication($window){var auth={user:$window.user};return auth}angular.module("users.services").factory("Authentication",Authentication),Authentication.$inject=["$window"]}(),function(){"use strict";function confirmDialog($mdDialog){var confirmDelete=function(data){var confirm=$mdDialog.confirm().title("Delete Confirmation").content("Are you sure you want to delete "+data+"?").ariaLabel("Delete").ok("Delete").cancel("Cancel");return $mdDialog.show(confirm)};return{confirmDelete:confirmDelete}}angular.module("users").factory("confirmDialog",confirmDialog),confirmDialog.$inject=["$mdDialog"]}(),function(){"use strict";function PasswordValidator($window){function getResult(password){var result=owaspPasswordStrengthTest.test(password);return result}function getPopoverMsg(){var popoverMsg="Please enter a passphrase or password with 10 or more characters, numbers, lowercase, uppercase, and special characters.";return popoverMsg}var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest,service={getResult:getResult,getPopoverMsg:getPopoverMsg};return service}angular.module("users.services").factory("PasswordValidator",PasswordValidator),PasswordValidator.$inject=["$window"]}(),function(){"use strict";function UsersService($resource){return $resource("api/users",{},{update:{method:"PUT"}})}function AdminService($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}angular.module("users.services").factory("UsersService",UsersService),UsersService.$inject=["$resource"],angular.module("users.admin.services").factory("AdminService",AdminService),AdminService.$inject=["$resource"]}();